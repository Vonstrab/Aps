use std::str::FromStr;

use rum_lib::ast::*;
use rum_lib::rum_type::Type;


grammar;

pub Prog: Box<AstCdms> = {
    <Block> => <>,
};

pub Block: Box<AstCdms> = {
    "(" <CDMS> ")" => <>,
};

pub CDMS : Box<AstCdms> = {
    <expr> => Box::new(AstCdms::FExp(<>)),
    <dec:declaration> ";" <cdms:CDMS>=> Box::new( AstCdms::Dec(dec,cdms) ),
    <exp:expr> ";" <cdms:CDMS>=> Box::new( AstCdms::Exp(exp,cdms) ),
};

pub declaration : Box<AstDec> = {
    "(" "let" <id:ident> <t:TYPE> <e:expr> ")" => Box::new(AstDec::ASTConst(id,t,e)),
    "(" "deffun" <id:ident>  "(" <a:Comma<ARG>> ")" <t:TYPE> <e:expr> ")" =>Box::new(AstDec::ASTFunc(id,t,a,e)),
    "(" "deffun" "rec" <id:ident>  "(" <a:Comma<ARG>> ")" <t:TYPE> <e:expr> ")" =>Box::new(AstDec::ASTFuncRec(id,t,a,e)),
    "(" "let" "mut" <id:ident> <t:TYPE> ")" => Box::new(AstDec::ASTVar(id,t)),    
};

pub expr : Box<AstExp> = {
    "true" => Box::new(AstExp::ASTBool(true)),
    "false"=>Box::new(AstExp::ASTBool(false)),
    <Num> => Box::new(AstExp::ASTInt(<>)),
    <ident> => Box::new(AstExp::ASTIdent(<>)),
    "(" "print" <expr> ")"=> Box::new(AstExp::ASTPrint(<>)),
    "(" "if" <e1:expr> <then:expr> <el:expr> ")"=> Box::new(AstExp::ASTIf(e1,then,el)),
    "(" "not" <e1:expr> ")" =>  Box::new(AstExp::ASTUnPrim(UnOprim::Not,e1)),
    "(" "and" <e1:expr> <e2:expr> ")" => Box::new(AstExp::ASTBinPrim(Oprim::And,e1,e2)),
    "(" "or" <e1:expr> <e2:expr> ")" =>Box::new(AstExp::ASTBinPrim(Oprim::Or,e1,e2)),
    "(" "eq" <e1:expr> <e2:expr> ")" =>Box::new(AstExp::ASTBinPrim(Oprim::Eq,e1,e2)),
    "(" "lt" <e1:expr> <e2:expr> ")" =>Box::new(AstExp::ASTBinPrim(Oprim::Lt,e1,e2)),
    "(" "add" <e1:expr> <e2:expr> ")" =>Box::new(AstExp::ASTBinPrim(Oprim::Add,e1,e2)),
    "(" "sub" <e1:expr> <e2:expr> ")" =>Box::new(AstExp::ASTBinPrim(Oprim::Sub,e1,e2)),
    "(" "mul" <e1:expr> <e2:expr> ")" =>Box::new(AstExp::ASTBinPrim(Oprim::Mul,e1,e2)),
    "(" "div" <e1:expr> <e2:expr> ")" =>Box::new(AstExp::ASTBinPrim(Oprim::Div,e1,e2)),
    "[" <a:Comma<ARG>>  "]" <expr:expr> =>Box::new(AstExp::ASTAbs(a,expr)),
    "(" <id:ident> <es:Spaces<expr>> ")" =>Box::new(AstExp::ASTApp(id,es)),
};

pub TYPE : Type ={
    <tprim>,
    "(" <args:Asterisk<TYPE>> "->" <ret:TYPE> ")" => Type::Func(args,Box::new(ret)),
};

pub ARG: Arg = { 
    <id:ident> ":" <t:TYPE> => Arg::new(&id,&t)  ,
};

pub tprim : Type = {
    "int" => Type::Int,
    "bool" => Type::Bool,
    "void" => Type::Void,
    "(" "vec" <t:tprim> ")" => Type::Vector(Box::new(t)),
};

Spaces<E>: Vec<E> =
    <v0:(<E>" ")*> <e1:E?> =>
v0.into_iter().chain(e1).collect();

Comma<E>: Vec<E> =
    <v0:(<E> ",")*> <e1:E?> =>
v0.into_iter().chain(e1).collect();

Asterisk<E>: Vec<E> =
    <v0:(<E> "*")*> <e1:E?> =>
v0.into_iter().chain(e1).collect();

Num: i64={ r"(-)?[0-9]+" => i64::from_str(<>).unwrap()};
ident :String=  r"([a-zA-Z])([a-zA-Z0-9])*" => <>.to_string();